{
  "id": "b21528a4-1988-430c-9a06-b27bd4940895",
  "name": "web-consent",
  "production": false,
  "running": false,
  "timestamp": "2024-04-27T03:19:20",
  "deploy_timestamp": null,
  "description": "",
  "tags": [
    "General"
  ],
  "file_name": null,
  "draft": {
    "id": "b21528a4-1988-430c-9a06-b27bd4940895",
    "lock": false,
    "name": "web-consent",
    "tags": [
      "General"
    ],
    "type": "collection",
    "response": {},
    "file_name": null,
    "flowGraph": {
      "edges": [
        {
          "id": "009eb92cec85f7ff8e012d8fd69b0a4c",
          "data": {
            "name": ""
          },
          "type": "",
          "source": "fb09b364-b59f-4635-81c2-fa66c7501603",
          "target": "a59d61d1-867e-4aad-9b0d-c3698931ce3c",
          "sourceHandle": "payload",
          "targetHandle": "payload"
        },
        {
          "id": "f82285362b5c36fad50f2ef4016ac232",
          "data": {
            "name": ""
          },
          "type": "",
          "source": "a59d61d1-867e-4aad-9b0d-c3698931ce3c",
          "target": "6f17c1f2-b1d7-42c9-a909-4e852d813f5e",
          "sourceHandle": "true",
          "targetHandle": "payload"
        },
        {
          "id": "41b91904c2109d929a60083b4a0652ce",
          "data": {
            "name": ""
          },
          "type": "",
          "source": "a59d61d1-867e-4aad-9b0d-c3698931ce3c",
          "target": "f283afd0-e18d-4126-a0ca-ded717224e78",
          "sourceHandle": "false",
          "targetHandle": "payload"
        },
        {
          "id": "79d5b9c7565f263f37351194ac96a671",
          "data": {
            "name": ""
          },
          "type": "",
          "source": "f283afd0-e18d-4126-a0ca-ded717224e78",
          "target": "9e027d57-87be-445b-984a-0a667b0006f9",
          "sourceHandle": "payload",
          "targetHandle": "payload"
        },
        {
          "id": "7d4b9d0a0d0fbec314454ae6f981618b",
          "data": {
            "name": ""
          },
          "type": "",
          "source": "f283afd0-e18d-4126-a0ca-ded717224e78",
          "target": "6f17c1f2-b1d7-42c9-a909-4e852d813f5e",
          "sourceHandle": "payload",
          "targetHandle": "payload"
        }
      ],
      "nodes": [
        {
          "id": "fb09b364-b59f-4635-81c2-fa66c7501603",
          "data": {
            "spec": {
              "id": "5ada67fa006690e709ac790a1fcd9882",
              "form": {
                "title": null,
                "groups": [
                  {
                    "name": null,
                    "fields": [
                      {
                        "id": "event_types",
                        "name": "Accept only the following event types",
                        "required": false,
                        "component": {
                          "type": "eventTypes",
                          "props": {
                            "label": "Event types"
                          }
                        },
                        "validation": null,
                        "description": "This node will start the workflow only if the defined below event-types are consumed. If left empty the node will trigger regardless of the event-type and all the events will be accepted. To add none-existing event-type, type its name and press ENTER."
                      },
                      {
                        "id": "debug",
                        "name": "Collect debugging information",
                        "required": false,
                        "component": {
                          "type": "bool",
                          "props": {
                            "label": "Collect debugging information"
                          }
                        },
                        "validation": null,
                        "description": "Set if you want to collect debugging information. Debugging collects a lot of data if you no longer need to test your workflow disable it to save data and compute power."
                      }
                    ],
                    "description": null
                  },
                  {
                    "name": "Debugging configuration",
                    "fields": [
                      {
                        "id": "event_id",
                        "name": "Event ID",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "Event ID"
                          }
                        },
                        "validation": null,
                        "description": "Define event id. It may match the event that exists in database. If left empty random id will be generated."
                      },
                      {
                        "id": "event_type",
                        "name": "Event type",
                        "required": false,
                        "component": {
                          "type": "eventType",
                          "props": {
                            "label": "Event type",
                            "onlyValueWithOptions": false
                          }
                        },
                        "validation": null,
                        "description": "Define event type. It may match the event that exists in database. If left empty then @debug-event-type will be defined."
                      },
                      {
                        "id": "properties",
                        "name": "Event properties",
                        "required": false,
                        "component": {
                          "type": "json",
                          "props": {
                            "label": "Event types"
                          }
                        },
                        "validation": null,
                        "description": "You can manually specify event properties for debug purpose. Works only for auto-generated events (does not work with the options below)."
                      },
                      {
                        "id": "profile_id",
                        "name": "Profile ID",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "Profile ID"
                          }
                        },
                        "validation": null,
                        "description": "Define profile id. It may match the event that exists in database. If left empty random id will be generated."
                      },
                      {
                        "id": "session_id",
                        "name": "Session ID",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "Session ID"
                          }
                        },
                        "validation": null,
                        "description": "Define session id. It may match the event that exists in database. If left empty random id will be generated."
                      }
                    ],
                    "description": "In debug mode the following event will be injected into workflow."
                  }
                ],
                "submit": null,
                "default": {}
              },
              "init": {
                "debug": false,
                "event_id": null,
                "event_type": {
                  "id": "page-view",
                  "name": "Page View"
                },
                "profile_id": null,
                "properties": "{}",
                "session_id": null,
                "event_types": [
                  {
                    "id": "page-view",
                    "name": "Page View"
                  }
                ]
              },
              "node": {
                "on_create": null,
                "on_remove": null
              },
              "skip": false,
              "author": "Risto Kowaczewski",
              "inputs": [],
              "manual": "start_action",
              "module": "tracardi.process_engine.action.v1.flow.start.start_action",
              "license": "MIT + CC",
              "outputs": [
                "payload"
              ],
              "version": "0.8.0",
              "run_once": {
                "ttl": 0,
                "type": "value",
                "value": "",
                "enabled": false
              },
              "className": "StartAction",
              "block_flow": false,
              "microservice": {
                "plugin": {
                  "id": "",
                  "name": "",
                  "resource": {}
                },
                "server": {
                  "resource": {
                    "id": "",
                    "name": ""
                  },
                  "credentials": {
                    "test": {},
                    "production": {}
                  }
                },
                "service": {
                  "id": "",
                  "name": ""
                }
              },
              "on_error_continue": false,
              "run_in_background": false,
              "join_input_payload": false,
              "append_input_payload": false,
              "on_connection_error_repeat": 1
            },
            "debug": false,
            "start": true,
            "metadata": {
              "pro": false,
              "desc": "Starts workflow and returns event data on payload port.",
              "icon": "event",
              "name": "Start",
              "tags": [],
              "type": "startNode",
              "brand": "Tracardi",
              "group": [
                "Flow"
              ],
              "width": 200,
              "height": 200,
              "remote": false,
              "purpose": [
                "collection"
              ],
              "frontend": false,
              "keywords": [
                "start node"
              ],
              "commercial": false,
              "emits_event": {},
              "documentation": {
                "inputs": {},
                "outputs": {
                  "payload": {
                    "desc": "This port returns empty payload object."
                  }
                },
                "tutorial": null
              }
            }
          },
          "type": "startNode",
          "position": {
            "x": 620.9756774902344,
            "y": 65.4930419921875
          }
        },
        {
          "id": "6f17c1f2-b1d7-42c9-a909-4e852d813f5e",
          "data": {
            "spec": {
              "id": "cb070b4b479ab46941a176847f876262",
              "form": null,
              "init": null,
              "node": {
                "on_create": null,
                "on_remove": null
              },
              "skip": false,
              "author": "Risto Kowaczewski",
              "inputs": [
                "payload"
              ],
              "manual": "end",
              "module": "tracardi.process_engine.action.v1.end_action",
              "license": "MIT + CC",
              "outputs": [],
              "version": "0.1",
              "run_once": {
                "ttl": 0,
                "type": "value",
                "value": "",
                "enabled": false
              },
              "className": "EndAction",
              "block_flow": false,
              "microservice": {
                "plugin": {
                  "id": "",
                  "name": "",
                  "resource": {}
                },
                "server": {
                  "resource": {
                    "id": "",
                    "name": ""
                  },
                  "credentials": {
                    "test": {},
                    "production": {}
                  }
                },
                "service": {
                  "id": "",
                  "name": ""
                }
              },
              "on_error_continue": false,
              "run_in_background": false,
              "join_input_payload": false,
              "append_input_payload": false,
              "on_connection_error_repeat": 1
            },
            "debug": false,
            "start": false,
            "metadata": {
              "pro": false,
              "desc": "Ends workflow.",
              "icon": "stop",
              "name": "End",
              "tags": [],
              "type": "startNode",
              "brand": "Tracardi",
              "group": [
                "Flow"
              ],
              "width": 300,
              "height": 100,
              "remote": false,
              "purpose": [
                "collection",
                "segmentation"
              ],
              "frontend": false,
              "keywords": [],
              "commercial": false,
              "emits_event": {},
              "documentation": {
                "inputs": {
                  "payload": {
                    "desc": "This port takes payload object."
                  }
                },
                "outputs": {},
                "tutorial": null
              }
            }
          },
          "type": "startNode",
          "position": {
            "x": 607.9756774902344,
            "y": 487.6075469970704
          }
        },
        {
          "id": "9e027d57-87be-445b-984a-0a667b0006f9",
          "data": {
            "spec": {
              "id": "376204f38c3295ed584a5be3f4a5f1aa",
              "form": null,
              "init": null,
              "node": {
                "on_create": null,
                "on_remove": null
              },
              "skip": false,
              "author": null,
              "inputs": [
                "payload"
              ],
              "manual": "update_profile_action",
              "module": "tracardi.process_engine.action.v1.operations.update_profile_action",
              "license": "MIT",
              "outputs": [],
              "version": "0.8.2",
              "run_once": {
                "ttl": 0,
                "type": "value",
                "value": "",
                "enabled": false
              },
              "className": "UpdateProfileAction",
              "block_flow": false,
              "microservice": {
                "plugin": {
                  "id": "",
                  "name": "",
                  "resource": {}
                },
                "server": {
                  "resource": {
                    "id": "",
                    "name": ""
                  },
                  "credentials": {
                    "test": {},
                    "production": {}
                  }
                },
                "service": {
                  "id": "",
                  "name": ""
                }
              },
              "on_error_continue": false,
              "run_in_background": false,
              "join_input_payload": false,
              "append_input_payload": false,
              "on_connection_error_repeat": 1
            },
            "debug": false,
            "start": false,
            "metadata": {
              "pro": false,
              "desc": "Updates profile in storage.",
              "icon": "store",
              "name": "Update profile",
              "tags": [],
              "type": "flowNode",
              "brand": "Tracardi",
              "group": [
                "Operations"
              ],
              "width": 300,
              "height": 100,
              "remote": false,
              "purpose": [
                "collection",
                "segmentation"
              ],
              "frontend": false,
              "keywords": [],
              "commercial": false,
              "emits_event": {},
              "documentation": {
                "inputs": {
                  "payload": {
                    "desc": "This port takes any payload object."
                  }
                },
                "outputs": {},
                "tutorial": null
              }
            }
          },
          "type": "flowNode",
          "position": {
            "x": 790.9756774902344,
            "y": 395.4930419921875
          }
        },
        {
          "id": "a59d61d1-867e-4aad-9b0d-c3698931ce3c",
          "data": {
            "spec": {
              "id": "e0b63b33eee28fc33272789f61e404de",
              "form": {
                "title": null,
                "groups": [
                  {
                    "name": "Consent requirements",
                    "fields": [
                      {
                        "id": "consent_ids",
                        "name": "IDs of required consents",
                        "required": false,
                        "component": {
                          "type": "consentTypes",
                          "props": {}
                        },
                        "validation": null,
                        "description": "Provide a list of IDs of consents that the profile must grant. Press enter to add more the one consent."
                      },
                      {
                        "id": "require_all",
                        "name": "Require all",
                        "required": false,
                        "component": {
                          "type": "bool",
                          "props": {
                            "label": "Require all"
                          }
                        },
                        "validation": null,
                        "description": "If set to ON, plugin will require all of selected consents to be granted and not revoked. If set to OFF, plugin will require only one of defined consents to be granted."
                      }
                    ],
                    "description": null
                  }
                ],
                "submit": null,
                "default": {}
              },
              "init": {
                "consent_ids": [
                  {
                    "id": "identification",
                    "name": "identification"
                  },
                  {
                    "id": "marketing",
                    "name": "marketing"
                  }
                ],
                "require_all": true
              },
              "node": {
                "on_create": null,
                "on_remove": null
              },
              "skip": false,
              "author": "Dawid Kruk",
              "inputs": [
                "payload"
              ],
              "manual": "require_consents_action",
              "module": "tracardi.process_engine.action.v1.consents.require_consents_action.plugin",
              "license": "MIT + CC",
              "outputs": [
                "true",
                "false"
              ],
              "version": "0.6.2",
              "run_once": {
                "ttl": 0,
                "type": "value",
                "value": "",
                "enabled": false
              },
              "className": "RequireConsentsAction",
              "block_flow": false,
              "microservice": {
                "plugin": {
                  "id": "",
                  "name": "",
                  "resource": {}
                },
                "server": {
                  "resource": {
                    "id": "",
                    "name": ""
                  },
                  "credentials": {
                    "test": {},
                    "production": {}
                  }
                },
                "service": {
                  "id": "",
                  "name": ""
                }
              },
              "on_error_continue": false,
              "run_in_background": false,
              "join_input_payload": false,
              "append_input_payload": false,
              "on_connection_error_repeat": 1
            },
            "debug": false,
            "start": false,
            "metadata": {
              "pro": false,
              "desc": "Checks if defined consents are granted by current profile.",
              "icon": "consent",
              "name": "Has consents",
              "tags": [
                "condition"
              ],
              "type": "condNode",
              "brand": "Tracardi",
              "group": [
                "Consents"
              ],
              "width": 300,
              "height": 100,
              "remote": false,
              "purpose": [
                "collection",
                "segmentation"
              ],
              "frontend": false,
              "keywords": [],
              "commercial": false,
              "emits_event": {},
              "documentation": {
                "inputs": {
                  "payload": {
                    "desc": "This port takes payload object."
                  }
                },
                "outputs": {
                  "true": {
                    "desc": "This port returns given payload if defined consents are granted."
                  },
                  "false": {
                    "desc": "This port returns given payload if defined consents are not granted."
                  }
                },
                "tutorial": null
              }
            }
          },
          "type": "condNode",
          "position": {
            "x": 633.9756774902344,
            "y": 173.4930419921875
          }
        },
        {
          "id": "f283afd0-e18d-4126-a0ca-ded717224e78",
          "data": {
            "spec": {
              "id": "61201f67a057d5a393b03f4e93e7ddb9",
              "form": {
                "title": null,
                "groups": [
                  {
                    "name": "Widget Configuration",
                    "fields": [
                      {
                        "id": "position",
                        "name": "Widget position",
                        "required": false,
                        "component": {
                          "type": "select",
                          "props": {
                            "items": {
                              "top": "Top",
                              "bottom": "Bottom"
                            },
                            "label": "Position"
                          }
                        },
                        "validation": null,
                        "description": "Where would you like to place the widget."
                      },
                      {
                        "id": "expand_height",
                        "name": "Widget height",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "Height"
                          }
                        },
                        "validation": null,
                        "description": "Type height of the expanded widget"
                      },
                      {
                        "id": "enabled",
                        "name": "Enable widget",
                        "required": false,
                        "component": {
                          "type": "bool",
                          "props": {
                            "label": "Enable"
                          }
                        },
                        "validation": null,
                        "description": "Only enabled widgets are show on the page"
                      },
                      {
                        "id": "always_display",
                        "name": "Display even if customer already granted consents",
                        "required": false,
                        "component": {
                          "type": "bool",
                          "props": {
                            "label": "Display always"
                          }
                        },
                        "validation": null,
                        "description": "When set widget will always be visible event if the consents were granted"
                      }
                    ],
                    "description": null
                  },
                  {
                    "name": "Widget Source Location",
                    "fields": [
                      {
                        "id": "uix_source",
                        "name": "Consent micro frontend location",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "URL"
                          }
                        },
                        "validation": null,
                        "description": "Provide URL where the micro frontend source is located. Usually it is the location of Tracardi API. Type different location if you use CDN."
                      },
                      {
                        "id": "endpoint",
                        "name": "Tracardi API endpoint URL",
                        "required": false,
                        "component": {
                          "type": "text",
                          "props": {
                            "label": "URL"
                          }
                        },
                        "validation": null,
                        "description": "Provide URL where the events from this widget will be send. Usually it is the location of Tracardi API. "
                      }
                    ],
                    "description": null
                  }
                ],
                "submit": null,
                "default": {}
              },
              "init": {
                "enabled": true,
                "endpoint": "https://c360-api.influencer.tips",
                "position": "bottom",
                "uix_source": "https://c360-api.influencer.tips",
                "expand_height": 400,
                "always_display": true
              },
              "node": {
                "on_create": null,
                "on_remove": null
              },
              "skip": false,
              "author": "Risto Kowaczewski",
              "inputs": [
                "payload"
              ],
              "manual": "show_consent_bar",
              "module": "tracardi.process_engine.action.v1.ux.consent.plugin",
              "license": "MIT + CC",
              "outputs": [
                "payload"
              ],
              "version": "0.8.2",
              "run_once": {
                "ttl": 0,
                "type": "value",
                "value": "",
                "enabled": false
              },
              "className": "ConsentUx",
              "block_flow": false,
              "microservice": {
                "plugin": {
                  "id": "",
                  "name": "",
                  "resource": {}
                },
                "server": {
                  "resource": {
                    "id": "",
                    "name": ""
                  },
                  "credentials": {
                    "test": {},
                    "production": {}
                  }
                },
                "service": {
                  "id": "",
                  "name": ""
                }
              },
              "on_error_continue": false,
              "run_in_background": false,
              "join_input_payload": false,
              "append_input_payload": false,
              "on_connection_error_repeat": 1
            },
            "debug": false,
            "start": false,
            "metadata": {
              "pro": false,
              "desc": "Shows consent pop-up on the front end.",
              "icon": "react",
              "name": "Show consent bar",
              "tags": [],
              "type": "flowNodeWithEvents",
              "brand": "Tracardi",
              "group": [
                "UIX Widgets"
              ],
              "width": 300,
              "height": 100,
              "remote": false,
              "purpose": [
                "collection"
              ],
              "frontend": true,
              "keywords": [],
              "commercial": false,
              "emits_event": {},
              "documentation": {
                "inputs": {
                  "payload": {
                    "desc": "This port takes payload object."
                  }
                },
                "outputs": {
                  "payload": {
                    "desc": "This port returns input payload object."
                  }
                },
                "tutorial": null
              }
            }
          },
          "type": "flowNodeWithEvents",
          "position": {
            "x": 713.9756774902344,
            "y": 280.4930419921875
          }
        }
      ]
    },
    "timestamp": "2024-03-26T01:47:35",
    "wf_schema": {
      "uri": "http://www.tracardi.com/2021/WFSchema",
      "version": "0.9.0-rc4",
      "server_version": "0.9.0-rc6"
    },
    "description": "",
    "deploy_timestamp": null
  },
  "lock": false,
  "type": "collection"
}